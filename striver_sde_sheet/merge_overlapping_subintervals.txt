// Approach 1

vector<vector<int>> merge(vector<vector<int>>& intervals) {
        sort(intervals.begin(), intervals.end());
        int n = intervals.size();
        int current_end = -1, current_start = -1;
        vector<vector<int>> ans;

        for(int i = 0; i < n;)
        {
            if(current_end == -1)
            {
                current_start = intervals[i][0];
                current_end = intervals[i][1];
                i++;
            }

            else if(current_end >= intervals[i][0])
            {
                if(current_end < intervals[i][1])
                    current_end = intervals[i][1];
                i++;
            }
            else
            {
                ans.push_back({current_start, current_end});
                current_start = intervals[i][0];
                current_end = intervals[i][1];
                i++;
            }
        }

        ans.push_back({current_start, current_end});

        return ans;
}


// Approach 2 (similar approach but cleaner code)

vector<vector<int>> merge(vector<vector<int>>& intervals) {
        int n = intervals.size();
        vector<vector<int>> ans;
        sort(intervals.begin(), intervals.end());

        for(int i = 0; i <n; i++)
        {
            if(ans.empty() || intervals[i][0] > ans.back()[1]){
                ans.push_back(intervals[i]);
            }
            else{
                ans.back()[1] = max(ans.back()[1], intervals[i][1]);
            }
        }

        return ans;
    }